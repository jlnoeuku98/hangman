{"ast":null,"code":"var _jsxFileName = \"/Users/lilj_237/hangman/src/HangmanGame.js\";\n// {// import './App.css';\n// // import React from 'react';\n// // import LetterBox from './LetterBox';\n// // import SingleLetterSearchbar from './SingleLetterSearchBar';\n\n// // const pics = ['Post.png', 'head.png', 'body.png', 'righthand.png', 'lefthand.png', 'leg.png', 'dead.png'];\n// // const words = [\"Morehouse\", \"Spelman\", \"Basketball\", \"Table\", \"Museum\", \"Excellent\", \"Fun\", \"React\"];\n// // class HangmanGame extends React.Component {\n// //   state = {\n// //     wordList: [],\n// //     curWord:  0,\n// //     lifeLeft: 0,\n// //     usedLetters: []\n// //   }\n// //   componentDidMount() {\n\n// //     console.log(words);\n// //     this.setState({\n// //       wordList: words\n// //     });\n// //   }\n// //   getPlayerName = (name) => {\n// //     this.setState({\n// //       playerName: name\n// //     });\n// //   }\n// //   startNewGame = () => {\n// //     this.setState({\n// //       curWord: Math.floor(Math.random() * this.state.wordList.length)\n// //     });\n// //   }\n\n// //   render(){\n// //     const word = this.state.wordList[this.state.curWord];\n// //     return(\n// //       <div>\n// //         <img src={pics[this.state.lifeLeft]}/>\n// //         <button onClick={this.startNewGame}>New Game</button>\n// //         <p>{word}</p>\n// //         <SingleLetterSearchbar></SingleLetterSearchbar>\n\n// //         <LetterBox \n// //           letter=\"a\"\n// //           isVisible={true}\n// //           boxStyle={{ backgroundColor: 'lightblue' }}\n// //           letterStyle={{ color: 'white', fontSize: '30px' }}\n// //         ></LetterBox>\n// //       </div>\n// //     )\n// //   }\n\n// // }\n// }\n\nimport './App.css';\nimport React from 'react';\nimport LetterBox from './LetterBox';\nimport SingleLetterSearchbar from './SingleLetterSearchBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pics = ['Post.png', 'head.png', 'body.png', 'righthand.png', 'lefthand.png', 'leg.png', 'dead.png', 'saved.'];\nconst words = [\"Morehouse\", \"Spelman\", \"Basketball\", \"Table\", \"Museum\", \"Excellent\", \"Fun\", \"React\"];\nclass HangmanGame extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      wordList: [],\n      curWord: \"\",\n      isWon: false,\n      lifeLeft: 0,\n      usedLetters: [],\n      displayWord: [],\n      message: \"\"\n    };\n    this.startNewGame = () => {\n      const randomWord = this.state.wordList[Math.floor(Math.random() * this.state.wordList.length)].toUpperCase();\n      this.setState({\n        curWord: randomWord,\n        lifeLeft: 0,\n        isWon: false,\n        usedLetters: [],\n        displayWord: Array(randomWord.length).fill(\"_\"),\n        message: \"\"\n      });\n    };\n    this.handleLetterGuess = letter => {\n      letter = letter.toUpperCase();\n      const {\n        curWord,\n        usedLetters,\n        lifeLeft,\n        displayWord\n      } = this.state;\n\n      // Ignore repeated guesses\n      if (usedLetters.includes(letter)) return;\n      let newUsed = [...usedLetters, letter];\n      let newDisplay = [...displayWord];\n      let newLives = lifeLeft;\n      let newMessage = \"\";\n      if (curWord.includes(letter)) {\n        // Reveal all matching letters\n        for (let i = 0; i < curWord.length; i++) {\n          if (curWord[i] === letter) {\n            newDisplay[i] = letter;\n          }\n        }\n        newMessage = \"Nice guess!\";\n      } else {\n        newLives += 1;\n        newMessage = \"Wrong letter!\";\n      }\n\n      // Check game status\n      let newIsWon = false;\n      if (!newDisplay.includes(\"_\")) {\n        newMessage = `You win! The word was \"${curWord}\".`;\n        newIsWon = true;\n      } else if (newLives >= pics.length - 1) {\n        newMessage = `Game over! The word was \"${curWord}\".`;\n      }\n      this.setState({\n        usedLetters: newUsed,\n        displayWord: newDisplay,\n        lifeLeft: newLives,\n        message: newMessage,\n        isWon: newIsWon\n      });\n    };\n  }\n  componentDidMount() {\n    this.setState({\n      wordList: words\n    }, this.startNewGame);\n  }\n  render() {\n    const {\n      curWord,\n      displayWord,\n      lifeLeft,\n      usedLetters,\n      message,\n      isWon\n    } = this.state;\n    const isGameOver = isWon || lifeLeft >= pics.length - 1;\n    const imageSrc = isWon ? 'saved.png' : pics[lifeLeft];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hangman Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageSrc,\n        alt: \"Hangman\",\n        className: \"hangman-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '34px',\n          letterSpacing: '10px'\n        },\n        children: displayWord.join(\" \")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SingleLetterSearchbar, {\n        onGuess: this.handleLetterGuess,\n        disabled: isGameOver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Used Letters: \", usedLetters.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.startNewGame,\n        children: \" New Game \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default HangmanGame;","map":{"version":3,"names":["React","LetterBox","SingleLetterSearchbar","jsxDEV","_jsxDEV","pics","words","HangmanGame","Component","constructor","args","state","wordList","curWord","isWon","lifeLeft","usedLetters","displayWord","message","startNewGame","randomWord","Math","floor","random","length","toUpperCase","setState","Array","fill","handleLetterGuess","letter","includes","newUsed","newDisplay","newLives","newMessage","i","newIsWon","componentDidMount","render","isGameOver","imageSrc","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","className","fontSize","letterSpacing","join","onGuess","disabled","fontWeight","onClick"],"sources":["/Users/lilj_237/hangman/src/HangmanGame.js"],"sourcesContent":["// {// import './App.css';\n// // import React from 'react';\n// // import LetterBox from './LetterBox';\n// // import SingleLetterSearchbar from './SingleLetterSearchBar';\n\n// // const pics = ['Post.png', 'head.png', 'body.png', 'righthand.png', 'lefthand.png', 'leg.png', 'dead.png'];\n// // const words = [\"Morehouse\", \"Spelman\", \"Basketball\", \"Table\", \"Museum\", \"Excellent\", \"Fun\", \"React\"];\n// // class HangmanGame extends React.Component {\n// //   state = {\n// //     wordList: [],\n// //     curWord:  0,\n// //     lifeLeft: 0,\n// //     usedLetters: []\n// //   }\n// //   componentDidMount() {\n    \n// //     console.log(words);\n// //     this.setState({\n// //       wordList: words\n// //     });\n// //   }\n// //   getPlayerName = (name) => {\n// //     this.setState({\n// //       playerName: name\n// //     });\n// //   }\n// //   startNewGame = () => {\n// //     this.setState({\n// //       curWord: Math.floor(Math.random() * this.state.wordList.length)\n// //     });\n// //   }\n\n// //   render(){\n// //     const word = this.state.wordList[this.state.curWord];\n// //     return(\n// //       <div>\n// //         <img src={pics[this.state.lifeLeft]}/>\n// //         <button onClick={this.startNewGame}>New Game</button>\n// //         <p>{word}</p>\n// //         <SingleLetterSearchbar></SingleLetterSearchbar>\n\n// //         <LetterBox \n// //           letter=\"a\"\n// //           isVisible={true}\n// //           boxStyle={{ backgroundColor: 'lightblue' }}\n// //           letterStyle={{ color: 'white', fontSize: '30px' }}\n// //         ></LetterBox>\n// //       </div>\n// //     )\n// //   }\n\n// // }\n// }\n\nimport './App.css';\nimport React from 'react';\nimport LetterBox from './LetterBox';\nimport SingleLetterSearchbar from './SingleLetterSearchBar';\n\nconst pics = [\n  'Post.png', 'head.png', 'body.png', 'righthand.png','lefthand.png', 'leg.png', 'dead.png','saved.'];\nconst words = [\"Morehouse\", \"Spelman\", \"Basketball\", \"Table\", \"Museum\", \"Excellent\", \"Fun\", \"React\"];\n\nclass HangmanGame extends React.Component {\n  state = {\n    wordList: [],\n    curWord: \"\",\n    isWon: false,\n    lifeLeft: 0,\n    usedLetters: [],\n    displayWord: [],\n    message: \"\"\n  }\n\n  componentDidMount() {\n    this.setState({ wordList: words }, this.startNewGame);\n  }\n\n  startNewGame = () => {\n    const randomWord = this.state.wordList[\n      Math.floor(Math.random() * this.state.wordList.length)\n    ].toUpperCase();\n\n    this.setState({\n      curWord: randomWord,\n      lifeLeft: 0,\n      isWon: false,\n      usedLetters: [],\n      displayWord: Array(randomWord.length).fill(\"_\"),\n      message: \"\"\n    });\n  }\n\n  handleLetterGuess = (letter) => {\n    letter = letter.toUpperCase();\n    const { curWord, usedLetters, lifeLeft, displayWord } = this.state;\n\n    // Ignore repeated guesses\n    if (usedLetters.includes(letter)) return;\n\n    let newUsed = [...usedLetters, letter];\n    let newDisplay = [...displayWord];\n    let newLives = lifeLeft;\n    let newMessage = \"\";\n\n    if (curWord.includes(letter)) {\n      // Reveal all matching letters\n      for (let i = 0; i < curWord.length; i++) {\n        if (curWord[i] === letter) {\n          newDisplay[i] = letter;\n        }\n      }\n      newMessage = \"Nice guess!\";\n    } else {\n      newLives += 1;\n      newMessage = \"Wrong letter!\";\n    }\n\n    // Check game status\n    let newIsWon = false;\n    if (!newDisplay.includes(\"_\")) {\n      newMessage = `You win! The word was \"${curWord}\".`;\n      newIsWon = true;\n    } else if (newLives >= pics.length - 1) {\n      newMessage = `Game over! The word was \"${curWord}\".`;\n    }\n\n    this.setState({\n      usedLetters: newUsed,\n      displayWord: newDisplay,\n      lifeLeft: newLives,\n      message: newMessage,\n      isWon: newIsWon\n    });\n  }\n\n  render() {\n    const { curWord, displayWord, lifeLeft, usedLetters, message, isWon } = this.state;\n    const isGameOver = isWon || (lifeLeft >= pics.length - 1);\n    const imageSrc = isWon ? 'saved.png' : pics[lifeLeft];\n\n    return (\n      <div style={{ textAlign: 'center', marginTop: '30px' }}>\n        <h1>Hangman Game</h1>\n        <img\n          src={imageSrc}\n          alt=\"Hangman\"\n          className=\"hangman-image\"\n        />\n        <p style={{ fontSize: '34px', letterSpacing: '10px' }}>\n          {displayWord.join(\" \")}\n        </p>\n  <SingleLetterSearchbar onGuess={this.handleLetterGuess} disabled={isGameOver} />\n        <p>Used Letters: {usedLetters.join(\", \")}</p>\n        <p style={{ fontWeight: 'bold' }}>{message}</p>\n        <button onClick={this.startNewGame}> New Game </button>\n\n        {/* Example of LetterBox for visualization */}\n        {/* <div style={{ marginTop: '20px' }}>\n          <LetterBox\n            letter=\"A\"\n            isVisible={true}\n            boxStyle={{ backgroundColor: 'lightblue' }}\n            letterStyle={{ color: 'white', fontSize: '30px' }}\n          />\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default HangmanGame;\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAO,WAAW;AAClB,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,qBAAqB,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,IAAI,GAAG,CACX,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,eAAe,EAAC,cAAc,EAAE,SAAS,EAAE,UAAU,EAAC,QAAQ,CAAC;AACrG,MAAMC,KAAK,GAAG,CAAC,WAAW,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,KAAK,EAAE,OAAO,CAAC;AAEpG,MAAMC,WAAW,SAASP,KAAK,CAACQ,SAAS,CAAC;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACxCC,KAAK,GAAG;MACNC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,KAAK;MACZC,QAAQ,EAAE,CAAC;MACXC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,EAAE;MACfC,OAAO,EAAE;IACX,CAAC;IAAA,KAMDC,YAAY,GAAG,MAAM;MACnB,MAAMC,UAAU,GAAG,IAAI,CAACT,KAAK,CAACC,QAAQ,CACpCS,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAACZ,KAAK,CAACC,QAAQ,CAACY,MAAM,CAAC,CACvD,CAACC,WAAW,CAAC,CAAC;MAEf,IAAI,CAACC,QAAQ,CAAC;QACZb,OAAO,EAAEO,UAAU;QACnBL,QAAQ,EAAE,CAAC;QACXD,KAAK,EAAE,KAAK;QACZE,WAAW,EAAE,EAAE;QACfC,WAAW,EAAEU,KAAK,CAACP,UAAU,CAACI,MAAM,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC;QAC/CV,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA,KAEDW,iBAAiB,GAAIC,MAAM,IAAK;MAC9BA,MAAM,GAAGA,MAAM,CAACL,WAAW,CAAC,CAAC;MAC7B,MAAM;QAAEZ,OAAO;QAAEG,WAAW;QAAED,QAAQ;QAAEE;MAAY,CAAC,GAAG,IAAI,CAACN,KAAK;;MAElE;MACA,IAAIK,WAAW,CAACe,QAAQ,CAACD,MAAM,CAAC,EAAE;MAElC,IAAIE,OAAO,GAAG,CAAC,GAAGhB,WAAW,EAAEc,MAAM,CAAC;MACtC,IAAIG,UAAU,GAAG,CAAC,GAAGhB,WAAW,CAAC;MACjC,IAAIiB,QAAQ,GAAGnB,QAAQ;MACvB,IAAIoB,UAAU,GAAG,EAAE;MAEnB,IAAItB,OAAO,CAACkB,QAAQ,CAACD,MAAM,CAAC,EAAE;QAC5B;QACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,OAAO,CAACW,MAAM,EAAEY,CAAC,EAAE,EAAE;UACvC,IAAIvB,OAAO,CAACuB,CAAC,CAAC,KAAKN,MAAM,EAAE;YACzBG,UAAU,CAACG,CAAC,CAAC,GAAGN,MAAM;UACxB;QACF;QACAK,UAAU,GAAG,aAAa;MAC5B,CAAC,MAAM;QACLD,QAAQ,IAAI,CAAC;QACbC,UAAU,GAAG,eAAe;MAC9B;;MAEA;MACA,IAAIE,QAAQ,GAAG,KAAK;MACpB,IAAI,CAACJ,UAAU,CAACF,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC7BI,UAAU,GAAG,0BAA0BtB,OAAO,IAAI;QAClDwB,QAAQ,GAAG,IAAI;MACjB,CAAC,MAAM,IAAIH,QAAQ,IAAI7B,IAAI,CAACmB,MAAM,GAAG,CAAC,EAAE;QACtCW,UAAU,GAAG,4BAA4BtB,OAAO,IAAI;MACtD;MAEA,IAAI,CAACa,QAAQ,CAAC;QACZV,WAAW,EAAEgB,OAAO;QACpBf,WAAW,EAAEgB,UAAU;QACvBlB,QAAQ,EAAEmB,QAAQ;QAClBhB,OAAO,EAAEiB,UAAU;QACnBrB,KAAK,EAAEuB;MACT,CAAC,CAAC;IACJ,CAAC;EAAA;EA5DDC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACZ,QAAQ,CAAC;MAAEd,QAAQ,EAAEN;IAAM,CAAC,EAAE,IAAI,CAACa,YAAY,CAAC;EACvD;EA4DAoB,MAAMA,CAAA,EAAG;IACP,MAAM;MAAE1B,OAAO;MAAEI,WAAW;MAAEF,QAAQ;MAAEC,WAAW;MAAEE,OAAO;MAAEJ;IAAM,CAAC,GAAG,IAAI,CAACH,KAAK;IAClF,MAAM6B,UAAU,GAAG1B,KAAK,IAAKC,QAAQ,IAAIV,IAAI,CAACmB,MAAM,GAAG,CAAE;IACzD,MAAMiB,QAAQ,GAAG3B,KAAK,GAAG,WAAW,GAAGT,IAAI,CAACU,QAAQ,CAAC;IAErD,oBACEX,OAAA;MAAKsC,KAAK,EAAE;QAAEC,SAAS,EAAE,QAAQ;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAC,QAAA,gBACrDzC,OAAA;QAAAyC,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrB7C,OAAA;QACE8C,GAAG,EAAET,QAAS;QACdU,GAAG,EAAC,SAAS;QACbC,SAAS,EAAC;MAAe;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACF7C,OAAA;QAAGsC,KAAK,EAAE;UAAEW,QAAQ,EAAE,MAAM;UAAEC,aAAa,EAAE;QAAO,CAAE;QAAAT,QAAA,EACnD5B,WAAW,CAACsC,IAAI,CAAC,GAAG;MAAC;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC,eACV7C,OAAA,CAACF,qBAAqB;QAACsD,OAAO,EAAE,IAAI,CAAC3B,iBAAkB;QAAC4B,QAAQ,EAAEjB;MAAW;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1E7C,OAAA;QAAAyC,QAAA,GAAG,gBAAc,EAAC7B,WAAW,CAACuC,IAAI,CAAC,IAAI,CAAC;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7C7C,OAAA;QAAGsC,KAAK,EAAE;UAAEgB,UAAU,EAAE;QAAO,CAAE;QAAAb,QAAA,EAAE3B;MAAO;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/C7C,OAAA;QAAQuD,OAAO,EAAE,IAAI,CAACxC,YAAa;QAAA0B,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWpD,CAAC;EAEV;AACF;AAEA,eAAe1C,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}