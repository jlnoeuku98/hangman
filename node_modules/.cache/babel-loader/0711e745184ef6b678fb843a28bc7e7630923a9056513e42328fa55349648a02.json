{"ast":null,"code":"var _jsxFileName = \"/Users/lilj_237/hangman/src/HangmanGame.js\";\n// import './App.css';\n// import React from 'react';\n// import LetterBox from './LetterBox';\n// import SingleLetterSearchbar from './SingleLetterSearchBar';\n\n// const pics = ['Post.png', 'head.png', 'body.png', 'righthand.png', 'lefthand.png', 'leg.png', 'dead.png'];\n// const words = [\"Morehouse\", \"Spelman\", \"Basketball\", \"Table\", \"Museum\", \"Excellent\", \"Fun\", \"React\"];\n// class HangmanGame extends React.Component {\n//   state = {\n//     wordList: [],\n//     curWord:  0,\n//     lifeLeft: 0,\n//     usedLetters: []\n//   }\n//   componentDidMount() {\n\n//     console.log(words);\n//     this.setState({\n//       wordList: words\n//     });\n//   }\n//   getPlayerName = (name) => {\n//     this.setState({\n//       playerName: name\n//     });\n//   }\n//   startNewGame = () => {\n//     this.setState({\n//       curWord: Math.floor(Math.random() * this.state.wordList.length)\n//     });\n//   }\n\n//   render(){\n//     const word = this.state.wordList[this.state.curWord];\n//     return(\n//       <div>\n//         <img src={pics[this.state.lifeLeft]}/>\n//         <button onClick={this.startNewGame}>New Game</button>\n//         <p>{word}</p>\n//         <SingleLetterSearchbar></SingleLetterSearchbar>\n\n//         <LetterBox \n//           letter=\"a\"\n//           isVisible={true}\n//           boxStyle={{ backgroundColor: 'lightblue' }}\n//           letterStyle={{ color: 'white', fontSize: '30px' }}\n//         ></LetterBox>\n//       </div>\n//     )\n//   }\n\n// }\n\n// export default HangmanGame;\nimport './App.css';\nimport React from 'react';\nimport LetterBox from './LetterBox';\nimport SingleLetterSearchbar from './SingleLetterSearchBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pics = ['Post.png', 'head.png', 'body.png', 'righthand.png', 'lefthand.png', 'leg.png', 'dead.png'];\nconst words = [\"Morehouse\", \"Spelman\", \"Basketball\", \"Table\", \"Museum\", \"Excellent\", \"Fun\", \"React\"];\nclass HangmanGame extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      wordList: [],\n      curWord: \"\",\n      lifeLeft: 0,\n      usedLetters: [],\n      displayWord: [],\n      message: \"\"\n    };\n    this.startNewGame = () => {\n      const randomWord = this.state.wordList[Math.floor(Math.random() * this.state.wordList.length)].toUpperCase();\n      this.setState({\n        curWord: randomWord,\n        lifeLeft: 0,\n        usedLetters: [],\n        displayWord: Array(randomWord.length).fill(\"_\"),\n        message: \"\"\n      });\n    };\n    this.handleLetterGuess = letter => {\n      letter = letter.toUpperCase();\n      const {\n        curWord,\n        usedLetters,\n        lifeLeft,\n        displayWord\n      } = this.state;\n\n      // Ignore repeated guesses\n      if (usedLetters.includes(letter)) return;\n      let newUsed = [...usedLetters, letter];\n      let newDisplay = [...displayWord];\n      let newLives = lifeLeft;\n      let newMessage = \"\";\n      if (curWord.includes(letter)) {\n        // Reveal all matching letters\n        for (let i = 0; i < curWord.length; i++) {\n          if (curWord[i] === letter) {\n            newDisplay[i] = letter;\n          }\n        }\n        newMessage = \"Nice guess!\";\n      } else {\n        newLives += 1;\n        newMessage = \"Wrong letter!\";\n      }\n\n      // Check game status\n      if (!newDisplay.includes(\"_\")) {\n        newMessage = `You win! The word was \"${curWord}\".`;\n      } else if (newLives >= pics.length - 1) {\n        newMessage = `Game over! The word was \"${curWord}\".`;\n      }\n      this.setState({\n        usedLetters: newUsed,\n        displayWord: newDisplay,\n        lifeLeft: newLives,\n        message: newMessage\n      });\n    };\n  }\n  componentDidMount() {\n    this.setState({\n      wordList: words\n    }, this.startNewGame);\n  }\n  render() {\n    const {\n      curWord,\n      displayWord,\n      lifeLeft,\n      usedLetters,\n      message\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hangman Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: pics[lifeLeft],\n        alt: \"Hangman\",\n        className: \"hangman-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '24px',\n          letterSpacing: '10px'\n        },\n        children: displayWord.join(\" \")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SingleLetterSearchbar, {\n        onGuess: this.handleLetterGuess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Used Letters: \", usedLetters.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontWeight: 'bold'\n        },\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.startNewGame,\n        children: \" New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(LetterBox, {\n          letter: \"A\",\n          isVisible: true,\n          boxStyle: {\n            backgroundColor: 'lightblue'\n          },\n          letterStyle: {\n            color: 'white',\n            fontSize: '30px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default HangmanGame;","map":{"version":3,"names":["React","LetterBox","SingleLetterSearchbar","jsxDEV","_jsxDEV","pics","words","HangmanGame","Component","constructor","args","state","wordList","curWord","lifeLeft","usedLetters","displayWord","message","startNewGame","randomWord","Math","floor","random","length","toUpperCase","setState","Array","fill","handleLetterGuess","letter","includes","newUsed","newDisplay","newLives","newMessage","i","componentDidMount","render","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","className","fontSize","letterSpacing","join","onGuess","fontWeight","onClick","isVisible","boxStyle","backgroundColor","letterStyle","color"],"sources":["/Users/lilj_237/hangman/src/HangmanGame.js"],"sourcesContent":["// import './App.css';\n// import React from 'react';\n// import LetterBox from './LetterBox';\n// import SingleLetterSearchbar from './SingleLetterSearchBar';\n\n// const pics = ['Post.png', 'head.png', 'body.png', 'righthand.png', 'lefthand.png', 'leg.png', 'dead.png'];\n// const words = [\"Morehouse\", \"Spelman\", \"Basketball\", \"Table\", \"Museum\", \"Excellent\", \"Fun\", \"React\"];\n// class HangmanGame extends React.Component {\n//   state = {\n//     wordList: [],\n//     curWord:  0,\n//     lifeLeft: 0,\n//     usedLetters: []\n//   }\n//   componentDidMount() {\n    \n//     console.log(words);\n//     this.setState({\n//       wordList: words\n//     });\n//   }\n//   getPlayerName = (name) => {\n//     this.setState({\n//       playerName: name\n//     });\n//   }\n//   startNewGame = () => {\n//     this.setState({\n//       curWord: Math.floor(Math.random() * this.state.wordList.length)\n//     });\n//   }\n\n//   render(){\n//     const word = this.state.wordList[this.state.curWord];\n//     return(\n//       <div>\n//         <img src={pics[this.state.lifeLeft]}/>\n//         <button onClick={this.startNewGame}>New Game</button>\n//         <p>{word}</p>\n//         <SingleLetterSearchbar></SingleLetterSearchbar>\n\n//         <LetterBox \n//           letter=\"a\"\n//           isVisible={true}\n//           boxStyle={{ backgroundColor: 'lightblue' }}\n//           letterStyle={{ color: 'white', fontSize: '30px' }}\n//         ></LetterBox>\n//       </div>\n//     )\n//   }\n\n// }\n\n\n\n// export default HangmanGame;\nimport './App.css';\nimport React from 'react';\nimport LetterBox from './LetterBox';\nimport SingleLetterSearchbar from './SingleLetterSearchBar';\n\nconst pics = [\n  'Post.png', 'head.png', 'body.png', 'righthand.png',\n  'lefthand.png', 'leg.png', 'dead.png'\n];\n\nconst words = [\"Morehouse\", \"Spelman\", \"Basketball\", \"Table\", \"Museum\", \"Excellent\", \"Fun\", \"React\"];\n\nclass HangmanGame extends React.Component {\n  state = {\n    wordList: [],\n    curWord: \"\",\n    lifeLeft: 0,\n    usedLetters: [],\n    displayWord: [],\n    message: \"\"\n  }\n\n  componentDidMount() {\n    this.setState({ wordList: words }, this.startNewGame);\n  }\n\n  startNewGame = () => {\n    const randomWord = this.state.wordList[\n      Math.floor(Math.random() * this.state.wordList.length)\n    ].toUpperCase();\n\n    this.setState({\n      curWord: randomWord,\n      lifeLeft: 0,\n      usedLetters: [],\n      displayWord: Array(randomWord.length).fill(\"_\"),\n      message: \"\"\n    });\n  }\n\n  handleLetterGuess = (letter) => {\n    letter = letter.toUpperCase();\n    const { curWord, usedLetters, lifeLeft, displayWord } = this.state;\n\n    // Ignore repeated guesses\n    if (usedLetters.includes(letter)) return;\n\n    let newUsed = [...usedLetters, letter];\n    let newDisplay = [...displayWord];\n    let newLives = lifeLeft;\n    let newMessage = \"\";\n\n    if (curWord.includes(letter)) {\n      // Reveal all matching letters\n      for (let i = 0; i < curWord.length; i++) {\n        if (curWord[i] === letter) {\n          newDisplay[i] = letter;\n        }\n      }\n      newMessage = \"Nice guess!\";\n    } else {\n      newLives += 1;\n      newMessage = \"Wrong letter!\";\n    }\n\n    // Check game status\n    if (!newDisplay.includes(\"_\")) {\n      newMessage = `You win! The word was \"${curWord}\".`;\n    } else if (newLives >= pics.length - 1) {\n      newMessage = `Game over! The word was \"${curWord}\".`;\n    }\n\n    this.setState({\n      usedLetters: newUsed,\n      displayWord: newDisplay,\n      lifeLeft: newLives,\n      message: newMessage\n    });\n  }\n\n  render() {\n    const { curWord, displayWord, lifeLeft, usedLetters, message } = this.state;\n\n    return (\n      <div style={{ textAlign: 'center', marginTop: '30px' }}>\n        <h1>Hangman Game</h1>\n        <img \n  src={pics[lifeLeft]} \n  alt=\"Hangman\"\n  className=\"hangman-image\"\n/>\n        <p style={{ fontSize: '24px', letterSpacing: '10px' }}>\n          {displayWord.join(\" \")}\n        </p>\n        <SingleLetterSearchbar onGuess={this.handleLetterGuess} />\n        <p>Used Letters: {usedLetters.join(\", \")}</p>\n        <p style={{ fontWeight: 'bold' }}>{message}</p>\n        <button onClick={this.startNewGame}> New Game</button>\n\n        {/* Example of LetterBox for visualization */}\n        <div style={{ marginTop: '20px' }}>\n          <LetterBox\n            letter=\"A\"\n            isVisible={true}\n            boxStyle={{ backgroundColor: 'lightblue' }}\n            letterStyle={{ color: 'white', fontSize: '30px' }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HangmanGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}