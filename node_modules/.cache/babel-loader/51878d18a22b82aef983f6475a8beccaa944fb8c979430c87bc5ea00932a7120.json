{"ast":null,"code":"// import './App.css';\n// import React from 'react';\n// import LetterBox from './LetterBox';\n// import SingleLetterSearchbar from './SingleLetterSearchBar';\n// const pics = ['Post.png', 'head.png', 'body.png', 'righthand.png', 'lefthand.png', 'leg.png', 'dead.png'];\n// const words = [\"Morehouse\", \"Spelman\", \"Basketball\", \"Table\", \"Museum\", \"Excellent\", \"Fun\", \"React\"];\n// class HangmanGame extends React.Component {\n//   state = {\n//     wordList: [],\n//     curWord:  0,\n//     lifeLeft: 0,\n//     usedLetters: []\n//   }\n//   componentDidMount() {\n//     console.log(words);\n//     this.setState({\n//       wordList: words\n//     });\n//   }\n//   getPlayerName = (name) => {\n//     this.setState({\n//       playerName: name\n//     });\n//   }\n//   startNewGame = () => {\n//     this.setState({\n//       curWord: Math.floor(Math.random() * this.state.wordList.length)\n//     });\n//   }\n//   render(){\n//     const word = this.state.wordList[this.state.curWord];\n//     return(\n//       <div>\n//         <img src={pics[this.state.lifeLeft]}/>\n//         <button onClick={this.startNewGame}>New Game</button>\n//         <p>{word}</p>\n//         <SingleLetterSearchbar></SingleLetterSearchbar>\n//         <LetterBox \n//           letter=\"a\"\n//           isVisible={true}\n//           boxStyle={{ backgroundColor: 'lightblue' }}\n//           letterStyle={{ color: 'white', fontSize: '30px' }}\n//         ></LetterBox>\n//       </div>\n//     )\n//   }\n// }\n// export default HangmanGame;\nimport'./App.css';import React from'react';import LetterBox from'./LetterBox';import SingleLetterSearchbar from'./SingleLetterSearchBar';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const pics=['Post.png','head.png','body.png','righthand.png','lefthand.png','leg.png','dead.png'];const words=[\"Morehouse\",\"Spelman\",\"Basketball\",\"Table\",\"Museum\",\"Excellent\",\"Fun\",\"React\"];class HangmanGame extends React.Component{constructor(){super(...arguments);this.state={wordList:[],curWord:\"\",lifeLeft:0,usedLetters:[],displayWord:[],message:\"\"};this.startNewGame=()=>{const randomWord=this.state.wordList[Math.floor(Math.random()*this.state.wordList.length)].toUpperCase();this.setState({curWord:randomWord,lifeLeft:0,usedLetters:[],displayWord:Array(randomWord.length).fill(\"_\"),message:\"\"});};this.handleLetterGuess=letter=>{letter=letter.toUpperCase();const{curWord,usedLetters,lifeLeft,displayWord}=this.state;// Ignore repeated guesses\nif(usedLetters.includes(letter))return;let newUsed=[...usedLetters,letter];let newDisplay=[...displayWord];let newLives=lifeLeft;let newMessage=\"\";if(curWord.includes(letter)){// Reveal all matching letters\nfor(let i=0;i<curWord.length;i++){if(curWord[i]===letter){newDisplay[i]=letter;}}newMessage=\"Nice guess!\";}else{newLives+=1;newMessage=\"Wrong letter!\";}// Check game status\nif(!newDisplay.includes(\"_\")){newMessage=\"\\uD83C\\uDF89 You win! The word was \\\"\".concat(curWord,\"\\\".\");}else if(newLives>=pics.length-1){newMessage=\"\\uD83D\\uDC80 Game over! The word was \\\"\".concat(curWord,\"\\\".\");}this.setState({usedLetters:newUsed,displayWord:newDisplay,lifeLeft:newLives,message:newMessage});};}componentDidMount(){this.setState({wordList:words},this.startNewGame);}render(){const{curWord,displayWord,lifeLeft,usedLetters,message}=this.state;return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',marginTop:'30px'},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uD83C\\uDFAF Hangman Game\"}),/*#__PURE__*/_jsx(\"img\",{src:pics[lifeLeft],alt:\"Hangman\",className:\"hangman-image\"}),/*#__PURE__*/_jsx(\"p\",{style:{fontSize:'24px',letterSpacing:'10px'},children:displayWord.join(\" \")}),/*#__PURE__*/_jsx(SingleLetterSearchbar,{onGuess:this.handleLetterGuess}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Used Letters: \",usedLetters.join(\", \")]}),/*#__PURE__*/_jsx(\"p\",{style:{fontWeight:'bold'},children:message}),/*#__PURE__*/_jsx(\"button\",{onClick:this.startNewGame,children:\"\\uD83D\\uDD04 New Game\"}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:'20px'},children:/*#__PURE__*/_jsx(LetterBox,{letter:\"A\",isVisible:true,boxStyle:{backgroundColor:'lightblue'},letterStyle:{color:'white',fontSize:'30px'}})})]});}}export default HangmanGame;","map":{"version":3,"names":["React","LetterBox","SingleLetterSearchbar","jsx","_jsx","jsxs","_jsxs","pics","words","HangmanGame","Component","constructor","arguments","state","wordList","curWord","lifeLeft","usedLetters","displayWord","message","startNewGame","randomWord","Math","floor","random","length","toUpperCase","setState","Array","fill","handleLetterGuess","letter","includes","newUsed","newDisplay","newLives","newMessage","i","concat","componentDidMount","render","style","textAlign","marginTop","children","src","alt","className","fontSize","letterSpacing","join","onGuess","fontWeight","onClick","isVisible","boxStyle","backgroundColor","letterStyle","color"],"sources":["/Users/lilj_237/hangman/src/HangmanGame.js"],"sourcesContent":["// import './App.css';\n// import React from 'react';\n// import LetterBox from './LetterBox';\n// import SingleLetterSearchbar from './SingleLetterSearchBar';\n\n// const pics = ['Post.png', 'head.png', 'body.png', 'righthand.png', 'lefthand.png', 'leg.png', 'dead.png'];\n// const words = [\"Morehouse\", \"Spelman\", \"Basketball\", \"Table\", \"Museum\", \"Excellent\", \"Fun\", \"React\"];\n// class HangmanGame extends React.Component {\n//   state = {\n//     wordList: [],\n//     curWord:  0,\n//     lifeLeft: 0,\n//     usedLetters: []\n//   }\n//   componentDidMount() {\n    \n//     console.log(words);\n//     this.setState({\n//       wordList: words\n//     });\n//   }\n//   getPlayerName = (name) => {\n//     this.setState({\n//       playerName: name\n//     });\n//   }\n//   startNewGame = () => {\n//     this.setState({\n//       curWord: Math.floor(Math.random() * this.state.wordList.length)\n//     });\n//   }\n\n//   render(){\n//     const word = this.state.wordList[this.state.curWord];\n//     return(\n//       <div>\n//         <img src={pics[this.state.lifeLeft]}/>\n//         <button onClick={this.startNewGame}>New Game</button>\n//         <p>{word}</p>\n//         <SingleLetterSearchbar></SingleLetterSearchbar>\n\n//         <LetterBox \n//           letter=\"a\"\n//           isVisible={true}\n//           boxStyle={{ backgroundColor: 'lightblue' }}\n//           letterStyle={{ color: 'white', fontSize: '30px' }}\n//         ></LetterBox>\n//       </div>\n//     )\n//   }\n\n// }\n\n\n\n// export default HangmanGame;\nimport './App.css';\nimport React from 'react';\nimport LetterBox from './LetterBox';\nimport SingleLetterSearchbar from './SingleLetterSearchBar';\n\nconst pics = [\n  'Post.png', 'head.png', 'body.png', 'righthand.png',\n  'lefthand.png', 'leg.png', 'dead.png'\n];\n\nconst words = [\"Morehouse\", \"Spelman\", \"Basketball\", \"Table\", \"Museum\", \"Excellent\", \"Fun\", \"React\"];\n\nclass HangmanGame extends React.Component {\n  state = {\n    wordList: [],\n    curWord: \"\",\n    lifeLeft: 0,\n    usedLetters: [],\n    displayWord: [],\n    message: \"\"\n  }\n\n  componentDidMount() {\n    this.setState({ wordList: words }, this.startNewGame);\n  }\n\n  startNewGame = () => {\n    const randomWord = this.state.wordList[\n      Math.floor(Math.random() * this.state.wordList.length)\n    ].toUpperCase();\n\n    this.setState({\n      curWord: randomWord,\n      lifeLeft: 0,\n      usedLetters: [],\n      displayWord: Array(randomWord.length).fill(\"_\"),\n      message: \"\"\n    });\n  }\n\n  handleLetterGuess = (letter) => {\n    letter = letter.toUpperCase();\n    const { curWord, usedLetters, lifeLeft, displayWord } = this.state;\n\n    // Ignore repeated guesses\n    if (usedLetters.includes(letter)) return;\n\n    let newUsed = [...usedLetters, letter];\n    let newDisplay = [...displayWord];\n    let newLives = lifeLeft;\n    let newMessage = \"\";\n\n    if (curWord.includes(letter)) {\n      // Reveal all matching letters\n      for (let i = 0; i < curWord.length; i++) {\n        if (curWord[i] === letter) {\n          newDisplay[i] = letter;\n        }\n      }\n      newMessage = \"Nice guess!\";\n    } else {\n      newLives += 1;\n      newMessage = \"Wrong letter!\";\n    }\n\n    // Check game status\n    if (!newDisplay.includes(\"_\")) {\n      newMessage = `ðŸŽ‰ You win! The word was \"${curWord}\".`;\n    } else if (newLives >= pics.length - 1) {\n      newMessage = `ðŸ’€ Game over! The word was \"${curWord}\".`;\n    }\n\n    this.setState({\n      usedLetters: newUsed,\n      displayWord: newDisplay,\n      lifeLeft: newLives,\n      message: newMessage\n    });\n  }\n\n  render() {\n    const { curWord, displayWord, lifeLeft, usedLetters, message } = this.state;\n\n    return (\n      <div style={{ textAlign: 'center', marginTop: '30px' }}>\n        <h1>ðŸŽ¯ Hangman Game</h1>\n        <img \n  src={pics[lifeLeft]} \n  alt=\"Hangman\"\n  className=\"hangman-image\"\n/>\n        <p style={{ fontSize: '24px', letterSpacing: '10px' }}>\n          {displayWord.join(\" \")}\n        </p>\n        <SingleLetterSearchbar onGuess={this.handleLetterGuess} />\n        <p>Used Letters: {usedLetters.join(\", \")}</p>\n        <p style={{ fontWeight: 'bold' }}>{message}</p>\n        <button onClick={this.startNewGame}>ðŸ”„ New Game</button>\n\n        {/* Example of LetterBox for visualization */}\n        <div style={{ marginTop: '20px' }}>\n          <LetterBox\n            letter=\"A\"\n            isVisible={true}\n            boxStyle={{ backgroundColor: 'lightblue' }}\n            letterStyle={{ color: 'white', fontSize: '30px' }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HangmanGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}